// Copyright Â© 2017 Yuki Nagahara

package main

import (
	"bytes"
	"io/ioutil"
	"testing"
)

func TestLimitReader(t *testing.T) {
	tests := []struct {
		input    []byte
		limit    int64
		expected []byte
	}{
		{
			[]byte("1234567890"),
			5,
			[]byte("12345"),
		}, {
			[]byte("123"),
			5,
			[]byte("123"),
		}, {
			[]byte("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806"),
			500,
			[]byte("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949"),
		}, {
			[]byte(""),
			5,
			[]byte(""),
		}, {
			nil,
			5,
			[]byte(""),
		}, {
			[]byte("1234567890"),
			0,
			[]byte(""),
		}, {
			[]byte("1234567890"),
			-1,
			[]byte(""),
		},
	}

	for _, test := range tests {
		lr := LimitReader(bytes.NewReader(test.input), test.limit)
		result, err := ioutil.ReadAll(lr)
		if err != nil {
			t.Error(err)
		}

		if !compare(result, test.expected) {
			t.Errorf("expected = %v, LimitReader.Read() = %v\n", test.expected, result)
		}
	}
}

func compare(a []byte, b []byte) bool {
	if len(a) != len(b) {
		return false
	}

	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}

	return true
}
